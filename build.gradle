
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1+"
    }
}

plugins {
    id "de.undercouch.download" version "3.4.3"
}

def platformReleases = [
        [
                "name": "mac",
                "platform": "osx64",
        ],
        [
                "name": "linux",
                "platform": "x86_64-linux-gnu",
        ],
]
def bitcoinVersion = "0.18.1"
def networkName = "litecoin"
def buildRepo = "https://github.com/cryptocurrency-testing/litecoin"

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group 'com.github.cryptocurrency-testing'
    version = "$bitcoinVersion-fromsrc"
    archivesBaseName = "embedded-bitcoind-binaries"
    sourceCompatibility = 1.6

    repositories {
        jcenter()
    }

    configurations {
        bundles
    }
}



project(':bitcoind-artifacts') {
    task "build-linux"(group: "build (linux)", type: Exec) {
        workingDir "$buildDir"
        executable "../../build-x86_64-linux-gnu.sh"
        commandLine "../../build-x86_64-linux-gnu.sh", "v$bitcoinVersion-quiet-zmq", "$buildRepo", "$networkName"
        outputs.dir(file("$buildDir/$networkName"))
    }
    task "copy-bin-linux"(group: "build (linux)", type: Copy) {
        dependsOn "build-linux"
        from("$buildDir/$networkName/src") {
            include "$networkName"+'d'
        }
        into "$buildDir/linux/x86_64-linux-gnu/bin"
    }
    task "linuxJar"(group: "build (linux)", type: Jar) {
        dependsOn "copy-bin-linux"
        from file("$buildDir/linux")
        appendix = "$networkName-x86_64-linux-gnu"
    }

    task "build-mac"(group: "build (mac)", type: Exec) {
        workingDir "$buildDir"
        executable "../../build-osx64.sh"
        commandLine "../../build-osx64.sh", "v$bitcoinVersion-quiet-zmq", "$buildRepo", "$networkName"
        outputs.dir(file("$buildDir/$networkName"))
    }
    task "copy-bin-mac"(group: "build (mac)", type: Copy) {
        dependsOn "build-mac"
        from("$buildDir/$networkName/src") {
            include "$networkName"+'d'
        }
        into "$buildDir/mac/osx64/bin"
    }
    task "macJar"(group: "build (mac)", type: Jar) {
        dependsOn "copy-bin-mac"
        from file("$buildDir/mac")
        appendix = "$networkName-osx64"
    }
    artifacts.add('bundles', tasks.getByName("macJar"))
    artifacts.add('bundles', tasks.getByName("linuxJar"))
}

subprojects {
    apply plugin: "maven-publish"
    apply plugin: "signing"
    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }

    publishing {
        repositories {
            maven {
                name = "OSSRH"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"

                credentials {
                    username = project.hasProperty('maven.username') ? project.property('maven.username') : System.getenv('MAVEN_USERNAME')
                    password = project.hasProperty('maven.password') ? project.property('maven.password') : System.getenv('MAVEN_PASSWORD')
                }
            }
        }
        publications {
            configurations.bundles.artifacts.all { archive ->
                def publicationName = archive.archiveTask.name - 'Jar'
                "$publicationName"(MavenPublication) {
                    artifactId "${archive.name}"
                    configurePom(pom, artifactId, 'A lightweight bundle of bitcoind with reduced size')

                    artifact archive
                    artifact sourcesJar
                    artifact javadocJar
                }
            }
        }
        signing {
            sign publishing.publications
        }
    }
}

publishing {
    repositories {
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"

            credentials {
                username = project.hasProperty('maven.username') ? project.property('maven.username') : System.getenv('MAVEN_USERNAME')
                password = project.hasProperty('maven.password') ? project.property('maven.password') : System.getenv('MAVEN_PASSWORD')
            }
        }
    }
    publications {
        bom(MavenPublication) {
            artifactId "embedded-bitcoind-binaries-$networkName-bom"
            configurePom(pom, artifactId, 'Bill of Materials')

            pom.withXml {
                def root = asNode()
                root.children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST

                    dependencyManagement {
                        dependencies {
                            project.subprojects.collectMany { it.configurations.bundles.artifacts }

                                    .each { archive ->
                                        dependency {
                                            groupId "${project.group}"
                                            artifactId "${archive.name}"
                                            version "${project.version}"

                                            if (!archive.name.contains('amd64') || archive.name.contains('lite')) {
                                                optional 'true'
                                            }
                                        }
                                    }
                        }
                    }
                }
            }
        }
    }
}
signing {
    sign publishing.publications
}
allprojects {
    task install(group: 'publishing') {}

    configurations.bundles.artifacts.all { archive ->
        def publicationName = archive.archiveTask.name - 'Jar'

        jar.dependsOn "${archive.archiveTask.name}"
        //test.dependsOn "test${archive.archiveTask.name.capitalize()}"
        install.dependsOn "publish${publicationName.capitalize()}PublicationToMavenLocal"
    }

    tasks.whenTaskAdded { task ->
        if (task.name == 'publishBomPublicationToMavenLocal') {
            install.dependsOn task
        }
    }
}

def configurePom(pom, artifact, desc) {
    pom.withXml {
        def root = asNode()

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            name artifact
            description desc
            url 'https://github.com/cryptocurrency-testing/embedded-bitcoind-binaries'

            scm {
                connection 'scm:git:git://github.com/cryptocurrency-testing/embedded-bitcoind-binaries.git'
                developerConnection 'scm:git:ssh://github.com:cryptocurrency-testing/embedded-bitcoind-binaries.git'
                url 'https://github.com/cryptocurrency-testing/embedded-bitcoind-binaries/tree/master'
            }

            licenses {
                license {
                    name 'The MIT Licence'
                    url 'https://opensource.org/licenses/MIT'
                }
            }

            developers {
                developer {
                    name 'James Hilliard'
                    email 'james.hilliard1@gmail.com'
                }
                developer {
                    name 'Thomas Kerin'
                    email 'me@thomaskerin.io'
                }
            }
        }
    }
}

class LazyExec extends AbstractExecTask<LazyExec> {
    LazyExec() {
        super(LazyExec.class)
    }

    @Override
    LazyExec commandLine(Object... arguments) {
        return super.commandLine(arguments.collect { argument ->
            if (argument instanceof Closure) {
                Closure closure = (Closure) argument;
                return new Object() {
                    @Override
                    String toString() {
                        return closure()
                    }
                }
            } else {
                return argument
            }
        }) as LazyExec
    }
}
